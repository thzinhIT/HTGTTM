import jwt from "jsonwebtoken";
import pool from "@/lib/db"; // import pool k·∫øt n·ªëi MySQL c·ªßa b·∫°n
import { sendEmail } from "@/utils/sendEmail"; // import h√†m g·ª≠i email c·ªßa b·∫°n
import { NextResponse } from "next/server";

export async function POST(req) {
  let connection;
  try {
    const body = await req.json();
    console.log("Momo Callback:", body);

    const { resultCode, extraData } = body;

    // ‚úÖ Ch·ªâ x·ª≠ l√Ω n·∫øu thanh to√°n th√†nh c√¥ng
    if (resultCode !== 0) {
      return NextResponse.json(
        { message: "Thanh to√°n th·∫•t b·∫°i!" },
        { status: 400 }
      );
    }

    // üëâ Gi·∫£ s·ª≠ b·∫°n truy·ªÅn userId v√† id qua extraData l√∫c t·∫°o ƒë∆°n (n·∫øu c·∫ßn)
    const extra = JSON.parse(Buffer.from(extraData, "base64").toString());
    const { userId, id, soLuong } = extra;

    connection = await pool.getConnection();
    await connection.beginTransaction();

    // L·∫•y d·ªØ li·ªáu n·∫°p t·ª´ b·∫£ng bang_gia
    const [rows] = await pool.execute(
      "SELECT diem_tngo FROM bang_gia WHERE id = ?",
      [id]
    );

    if (rows.length === 0) {
      return NextResponse.json(
        { message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin th·∫ª." },
        { status: 404 }
      );
    }

    const { diem_tngo } = rows[0];

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    const [userRows] = await pool.execute(
      "SELECT so_du_diem, email FROM the_nguoi_dung WHERE id = ?",
      [userId]
    );

    if (userRows.length === 0) {
      return NextResponse.json(
        { message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." },
        { status: 404 }
      );
    }

    const user = userRows[0];

    const so_du_diem =
      parseFloat(user.so_du_diem) + parseFloat(diem_tngo) * parseInt(soLuong);

    // C·∫≠p nh·∫≠t s·ªë d∆∞
    await pool.execute(
      "UPDATE the_nguoi_dung SET so_du_diem = ? WHERE id = ?",
      [so_du_diem, userId]
    );

    await connection.commit();
    return NextResponse.json({ message: "C·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng qua MoMo." });
  } catch (error) {
    if (connection) await connection.rollback();
    console.error("L·ªói x·ª≠ l√Ω IPN:", error);
    return NextResponse.json(
      { message: "L·ªói x·ª≠ l√Ω IPN.", error: error.message },
      { status: 500 }
    );
  } finally {
    if (connection) connection.release();
  }
}
